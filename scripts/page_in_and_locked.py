#!/usr/bin/python3
#
# This script was automatically generated by ChatGPT (OpenAI).
#
# Modified by Qiang Liu <cyruscyliu@gmail.com>
#
# Usage: python3 page_in_and_locked.py $(pgrep -f "qemu-system")
#
import os
import sys
import struct
import subprocess
import tempfile

PAGE_SIZE = os.sysconf("SC_PAGE_SIZE")
PAGEMAP_ENTRY_SIZE = 8

def is_accessible_region(line):
    perms = line.split()[1]
    return not perms.startswith("---")

def is_special_named_pages(line):
    items = line.split()
    if len(items) != 6:
        return False
    name = items[5]
    return name in ['[stack]', '[vvar]', '[vdso]']

def is_page_resident(pagemap_entry):
    return (pagemap_entry >> 63) & 1  # Bit 63: page present

def scan_mapped_pages(pid):
    maps_path = f"/proc/{pid}/maps"
    pagemap_path = f"/proc/{pid}/pagemap"
    unmapped_pages = []
    regions = []

    with open(maps_path, 'r') as maps_file, open(pagemap_path, 'rb') as pagemap:
        for line in maps_file:
            if not is_accessible_region(line):
                continue
            if is_special_named_pages(line):
                continue

            addr_range = line.split()[0]
            start_str, end_str = addr_range.split('-')
            start = int(start_str, 16)
            end = int(end_str, 16)
            size = end - start

            if size > 0x100000000:
                continue
            regions.append((start, size))

            for page_start in range(start, end, PAGE_SIZE):
                offset = (page_start // PAGE_SIZE) * PAGEMAP_ENTRY_SIZE
                pagemap.seek(offset)
                entry = pagemap.read(PAGEMAP_ENTRY_SIZE)
                if not entry:
                    continue
                pagemap_entry = struct.unpack('Q', entry)[0]
                if not is_page_resident(pagemap_entry):
                    unmapped_pages.append(page_start)

    return unmapped_pages, regions

def generate_gdb_script(unmapped_pages, regions, pid):
    gdb_cmds = [f"attach {pid}"]
    for addr in unmapped_pages:
        gdb_cmds.append(f"x/b {hex(addr)}")  # Trigger page-in
    for region in regions:
        gdb_cmds.append(f"call (int)mlock((void *){hex(region[0])}, {hex(region[1])})")  # Lock the region
    gdb_cmds.append("detach")
    gdb_cmds.append("quit")
    return "\n".join(gdb_cmds)

def main(pid):
    unmapped_pages, regions = scan_mapped_pages(pid)
    if not unmapped_pages:
        print("All mapped pages are already resident.")
    else:
        print(f"Found {len(unmapped_pages)} non-resident pages.")

    # Write GDB script to temp file
    gdb_script = generate_gdb_script(unmapped_pages, regions, pid)
    with tempfile.NamedTemporaryFile("w", delete=False) as tf:
        tf.write(gdb_script)
        tf_path = tf.name

    # Run GDB in batch mode
    subprocess.run(["gdb", "-batch", "-x", tf_path], check=True)

    print("All non-resident pages have been touched and should now be resident.")

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print(f"usage: {sys.argv[0]} pid")
        exit(1)
    pid = sys.argv[1]
    main(pid)
